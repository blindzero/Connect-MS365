# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  # just to be sure not too many parallel runs of pipeline
  batch: true
  branches:
    include:
      - master
      - feature/*
  paths:
    include:
    - '*' # same as '/' for the repository root
    exclude:
    # exclude some directories that dont need any pipeline run
    - 'docs/*'
    - '.github/*'
    - '.vscode/*'
    - 'LICENSE'
    - '*.md'
    - 'build/*'

variables:
  # setting isMaster variable if branch is master
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  # setting vars for custom semver versioning names
  major: 1
  minor: 2

stages:
- stage: VersionNumbering
  displayName: Set Version Numbers
  jobs:
  # job for branch versionings if not branch
  - job: Build_Branch_Version_Number
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
    variables:
      # revision build numbering
      brpatch: $[counter(variables['build.sourcebranchname'], 0)]
      prpatch: $[counter(variables['system.pullrequest.pullrequestid'], 0)]
    steps:
      # disabling checkout
      - checkout: none
      # to major.minor-branch.build if not a pr
      - task: PowerShell@2
        condition: ne(variables['Build.Reason'], 'PullRequest')
        name: SetBranchBuildName
        displayName: Set Branch Build Name
        inputs:
          targetType: 'Inline'
          script: Write-Host "##vso[build.updatebuildnumber]$(major).$(minor)-$(Build.SourceBranchName).$(brpatch)"
      # to major.minor-prid.build if a pr
      - task: PowerShell@2
        condition: eq(variables['Build.Reason'], 'PullRequest')
        name: SetPRBuildName
        displayName: Set PR Build Name
        inputs:
          targetType: 'Inline'
          script: Write-Host "##vso[build.updatebuildnumber]$(major).$(minor)-PullRequest.$(prpatch)"

- stage: CompileAndUnitTests
  displayName: 'Compile and Unit Tests'
  jobs:
  - job: Compile
    displayName: 'Compile'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: PowerShell@2
      displayName: 'Build Bootstrap and Init'
      inputs:
        targetType: 'Inline'
        script: |
          git config --global user.email 13959569+blindzero@users.noreply.github.com
          git config --global user.name Matthias Fleschuetz
          ./build.ps1 -Bootstrap
          ./build.ps1 Init
    - task: PowerShell@2
      displayName: 'Build Compile'
      inputs:
        targetType: Inline
        script: ./build.ps1 Compile
    - task: PublishPipelineArtifact@1
      displayName: 'Publish compile artifact'
      inputs:
        targetPath: 'BuildOutput\Connect-MS365'
        artifactName: 'Connect-MS365_compile'
  - job: TestUnit_Win
    displayName: 'Windows Unit Tests'
    dependsOn: Compile 
    pool:
      vmImage: 'windows-latest' 
    steps:
    # disabling checkout
    - checkout: none
    - task: PowerShell@2
      displayName: 'Build Bootstrap and Init'
      inputs:
        targetType: 'Inline'
        script: |
            git config --global user.email 13959569+blindzero@users.noreply.github.com
            git config --global user.name "Matthias Fleschuetz"
            ./build.ps1 -Bootstrap
            ./build.ps1 Init
    - task: DownloadPipelineArtifact@2
      displayName: 'Download compile artifacts'
      inputs:
        artifact: 'Connect-MS365_compile'
        path: 'BuildOutput\Connect-MS365'
    - task: PowerShell@2
      displayName: 'Test Unit'
      enabled: true
      inputs:
        targetType: Inline
        script: |
          Import-Module -Name Pester -MinimumVersion 5.0.1 -Force
          ./build.ps1 TestUnit
    - task: PublishTestResults@2
      displayName: 'Publish Unit Test Results'
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/testResultsUnit.xml'
        mergeTestResults: true
        testRunTitle: 'Unit Tests'

- stage: BuildAndIntegrationTests
  displayName: 'Build and Integration Tests'
  condition: and(succeeded(), eq(variables.isMaster, true))
  jobs:
  - job: Build
    displayName: 'Build'
    pool:
      vmImage: 'windows-latest' 
    steps:
    - task: PowerShell@2
      displayName: 'Build Bootstrap and Init'
      inputs:
        targetType: 'Inline'
        script: |
            git config --global user.email 13959569+blindzero@users.noreply.github.com
            git config --global user.name Matthias Fleschuetz
            ./build.ps1 -Bootstrap
            ./build.ps1 Init
    - task: PowerShell@2
      displayName: 'Build'
      inputs:
        filePath: './build.ps1'
        arguments: 'Build'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifact'
      inputs:
        pathToPublish: 'BuildOutput\Connect-MS365'
        artifactName: 'Connect-MS365'
  - job: TestIntegration_Win
    displayName: 'Windows Integration Tests'
    dependsOn: Build
    pool:
      vmImage: 'windows-latest' 
    steps:
    # disabling checkout
    - checkout: none
    - task: PowerShell@2
      displayName: 'Build Bootstrap and Init'
      inputs:
        targetType: 'Inline'
        script: |
            git config --global user.email 13959569+blindzero@users.noreply.github.com
            git config --global user.name Matthias Fleschuetz
            ./build.ps1 -Bootstrap
            ./build.ps1 Init
    - task: DownloadBuildArtifacts@0
      displayName: 'Download build artifacts'
      inputs:
        artifactName: 'Connect-MS365'
        downloadPath: 'BuildOutput'
    - task: PowerShell@2
      displayName: 'Test Integration'
      inputs:
        targetType: Inline
        script: |
          Import-Module -Name Pester -MinimumVersion 5.0.1 -Force -Verbose
          ./build.ps1 TestIntegration
    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results'
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/testResultsIntegration.xml'
        mergeTestResults: true
        testRunTitle: 'Integration Tests'   
